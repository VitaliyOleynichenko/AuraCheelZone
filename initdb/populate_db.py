import os
import sys
import logging

# Добавляем родительскую директорию (корень проекта) в sys.path,
# чтобы Python увидел пакет `app`
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
sys.path.insert(0, project_root)

from app import create_app, db
from app.models import Menu, Employee, Table, Order, OrderItem

# Настройка логирования
logging.basicConfig(level=logging.DEBUG)

def populate_db():
    # Создаём Flask-приложение и поднимаем контекст
    app = create_app()
    app.app_context().push()

    # Удаляем все таблицы (если они были) и создаём заново
    db.drop_all()
    db.create_all()

    # === Заполнение таблицы Menu ===
    menu_data = [
        ('Рыбное Ассорти', 'Семга м/с, масляная рыба, лимон, оливка, зелень', 380, 'fish_assorty.jpg', 'Горячее'),
        ('Селедь по-русски', 'Селедь м/с, картофель отв, лук репчатый, лимон', 200, 'selede.jpg', 'Закуски'),
        ('Креветки в кляре', 'Креветки, спайс-соус, лимон, зелень', 400, 'shrimp_tempura.jpg', 'Горячее'),
        ('Овощное ассорти', 'Перец болгарский, огурец свежий, помидор свежий, маслины', 180, 'veggie_platter.jpg', 'Закуски'),
        ('Сырное ассорти', 'Российский сыр, Фета, Пармезан, мед, грецкий орех', 280, 'cheese_assorty.jpg', 'Закуски'),
        ('Греческая закуска', 'Помидор свежий, сыр, чеснок, майонез, зелень', 210, 'greek_appetizer.jpg', 'Закуски'),
        ('Фруктовая тарелка', 'Виноград, киви, апельсин, банан, мята', 330, 'fruit_platter.jpg', 'Закуски'),
        ('Рулетики из ветчины', 'Ветчина, сыр сливочный, зелень, чеснок, огурец маринованный', 230, 'ham_rolls.jpg', 'Закуски'),
        ('Сало по-Домашнему', 'Грудинка с/с, зелень, горчица', 180, 'homestyle_salo.jpg', 'Закуски'),
        ('Аура', 'Курица копченая, картофель пай, огурец свежий, морковь корейская, соус Цезарь', 260, 'aura.jpg', 'Горячее'),
        ('Бургомистер', 'Свинина жареная, бекон, перец болгарский, лук, микс салата, соус греческий', 300, 'burgomister.jpg', 'Горячее'),
        ('Карибы', 'Куриная грудка, ананас, яйцо отв, сыр, чеснок, орех грецкий, соус Цезарь', 260, 'kariby.jpg', 'Горячее'),
        ('Цезарь с курицей', 'Куриная грудка, помидор свежий, сухарики, микс салата, сыр пармезан, соус Цезарь', 350, 'caesar_chicken.jpg', 'Салаты'),
        ('Бристоль', 'Ветчина, язык говяжий, огурец свежий, сыр, яйцо отв, майонез', 300, 'bristol.jpg', 'Закуски'),
        ('Лесной Бор', 'Говядина, огурец маринованный, опята маринованные, лук, чеснок, зелень', 350, 'forest_bor.jpg', 'Горячее'),
        ('Мясной микс', 'Курица отв, язык говяжий, огурец маринованный, зеленое яблоко, красный лук', 300, 'meat_mix.jpg', 'Горячее'),
        ('Мексиканский', 'Говядина, микс салата, шампиньоны, перец болгарский, фасоль стручковая', 350, 'mexican.jpg', 'Горячее'),
        ('Греческий', 'Помидор свежий, огурец свежий, перец болгарский, сыр фета, микс салата', 300, 'greek.jpg', 'Салаты'),
        ('Овощной', 'Помидор свежий, огурец свежий, зелень, заправка на выбор (масло, сметана, майонез)', 220, 'vegetable.jpg', 'Салаты'),
        ('Мясо по-купечески', 'Свинина, говядина, помидор свежий, картофель, грибы шампиньоны, майонез, сыр', 440, 'merchant_meat.jpg', 'Горячее'),
        ('Мясо по-Французски', 'Свинина, картофель, помидор свежий, майонез, сыр', 380, 'french_meat.jpg', 'Горячее'),
        ('Мясо по-Аргентински', 'Говядина запеченная, картофель, грибы шампиньоны, лук, сыр, соус', 440, 'argentine_meat.jpg', 'Горячее'),
        ('Баранина с баклажанами', 'Баранина, баклажаны, майонез, сыр, лук, морковь, томат', 450, 'lamb_eggplant.jpg', 'Горячее'),
        ('Бавер Куриный', 'Куриная грудка, сыр, помидор, чеснок, шампиньоны, сливки, майонез', 350, 'baver_chicken.jpg', 'Горячее'),
        ('Манты', 'Говядина', 400, 'manti.jpg', 'Горячее'),
        ('Бешбармак', 'Говядина', 350, 'beshbarmaq.jpg', 'Горячее'),
        ('Судак "Золотая Рыбка"', 'Судак, сыр, грибы, лук-морковь, помидор свежий, чеснок, соус', 400, 'pike.jpg', 'Горячее'),
        ('Стейк из семги', 'Филе семги со специями и лимоном', 440, 'salmon_steak.jpg', 'Горячее'),
        ('Радужная форель', 'Речная форель, лимон, специи, зелень', 330, 'trout.jpg', 'Горячее'),
        ('Шашлык из свинины (спинка)', 'Спинная вырезка, лук, соус томатный', 300, 'pork_shashlik_spinka.jpg', 'Горячее'),
        ('Шашлык из свинины (шея)', 'Шейная вырезка, лук, соус томатный', 300, 'pork_shashlik_sheya.jpg', 'Горячее'),
        ('Люля-кебаб', 'Люля-кебаб, лаваш, лук, соус томатный', 300, 'lyulya_kebab.jpg', 'Горячее'),
        ('Шашлык из куриной грудки', 'Куриная грудка, лук, соус томатный', 270, 'chicken_shashlik.jpg', 'Горячее'),
        ('Шашлык из куриных крыльев', 'Куриные крылья, лук, соус томатный', 270, 'chicken_wings.jpg', 'Горячее'),
        ('Кока-кола', '0,5 л', 120, 'cola.jpg', 'Напитки'),
        ('Соки', '1 л', 150, 'juices.jpg', 'Напитки'),
        ('Чай заварной', '0,8 л', 100, 'tea.jpg', 'Напитки'),
        ('Американо', '150 мл', 120, 'americano.jpg', 'Напитки'),
        ('Пиво', '0,5 л', 150, 'beer.jpg', 'Напитки')
    ]
    for name, description, price, image_url, category in menu_data:
        db.session.add(Menu(
            name=name,
            description=description,
            price=price,
            image_url=image_url,
            category=category
        ))

    # === Заполнение таблицы Employee ===
    employees_data = [
        ('Ivanov', 'Ivan', 'Администратор'),
        ('Sergeev', 'Sergey', 'Директор'),
        ('Petrov', 'Petr', 'Шеф-Повар'),
        ('Sidorov', 'Nikita', 'Повар'),
        ('Nikolaev', 'Evgeny', 'Повар'),
        ('Smirnov', 'Nikolay', 'Повар'),
        ('Alexandrova', 'Anastasia', 'Официант'),
        ('Fedorov', 'Vladislav', 'Официант'),
        ('Maximov', 'Egor', 'Официант'),
        ('Romanov', 'Yura', 'Официант'),
        ('Erofeev', 'Egor', 'Бармен'),
        ('Dolmatova', 'Anna', 'Посудомойщик'),
        ('Chatkina', 'Arina', 'Уборщик Помещений'),
        ('Ermolaeva', 'Karina', 'Бухгалтер')
    ]
    for surname, name, position in employees_data:
        db.session.add(Employee(surname=surname, name=name, position=position))

    # === Заполнение таблицы Table (Столики) ===
    for i in range(1, 21):
        db.session.add(Table(number=i, status='Свободен'))

    # === Заполнение таблицы Order и OrderItem ===
    # Пример: два заказа, затем к первому заказу добавляем позиции
    orders_data = [
        ('89991234567', False, None, 1, '2023-02-14 12:00:00', 1000),
        ('89992345678', True, 'ул. Ленина, 10', None, '2023-02-14 13:00:00', 1500)
    ]
    for phone, delivery, address, table_id, order_date, total_amount in orders_data:
        order = Order(
            phone=phone,
            delivery=delivery,
            address=address,
            table_id=table_id,
            order_date=order_date,
            total_amount=total_amount
        )
        db.session.add(order)
        db.session.flush()  # чтобы получить order.order_id сразу

        # Пример заполнения позиций заказа:
        order_items_data = [
            (order.order_id, 1, 2, 500),  # к этому заказу: item_id=1, quantity=2, subtotal=500
            (order.order_id, 2, 3, 750)   # к этому заказу: item_id=2, quantity=3, subtotal=750
        ]
        for order_id, item_id, quantity, subtotal in order_items_data:
            db.session.add(OrderItem(
                order_id=order_id,
                item_id=item_id,
                quantity=quantity,
                subtotal=subtotal
            ))

    # Сохраняем все изменения в БД
    db.session.commit()
    logging.info("База данных успешно заполнена!")

if __name__ == '__main__':
    populate_db()
    print("Инициализация базы данных и заполнение данных завершены.")
